/* tslint:disable */
/* eslint-disable */
/**
 * ZKorum
 * ZKorum backend
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ApiV1AuthAuthenticatePost200Response
 */
export interface ApiV1AuthAuthenticatePost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost200Response
     */
    'codeExpiry': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost200Response
     */
    'nextCodeSoonestTime': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthAuthenticatePost409Response
 */
export interface ApiV1AuthAuthenticatePost409Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost409Response
     */
    'reason': ApiV1AuthAuthenticatePost409ResponseReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost409Response
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost409Response
     */
    'sessionExpiry': string;
    /**
     * 
     * @type {Array<ApiV1AuthAuthenticatePost409ResponseAnyOfSyncingDevicesInner>}
     * @memberof ApiV1AuthAuthenticatePost409Response
     */
    'syncingDevices': Array<ApiV1AuthAuthenticatePost409ResponseAnyOfSyncingDevicesInner>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost409Response
     */
    'encryptedSymmKey': string;
    /**
     * 
     * @type {{ [key: string]: ApiV1AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof ApiV1AuthAuthenticatePost409Response
     */
    'emailCredentialsPerEmail': { [key: string]: ApiV1AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType}
     * @memberof ApiV1AuthAuthenticatePost409Response
     */
    'secretCredentialsPerType': ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType;
}

export const ApiV1AuthAuthenticatePost409ResponseReasonEnum = {
    AlreadyLoggedIn: 'already_logged_in'
} as const;

export type ApiV1AuthAuthenticatePost409ResponseReasonEnum = typeof ApiV1AuthAuthenticatePost409ResponseReasonEnum[keyof typeof ApiV1AuthAuthenticatePost409ResponseReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthAuthenticatePost409ResponseAnyOf
 */
export interface ApiV1AuthAuthenticatePost409ResponseAnyOf {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost409ResponseAnyOf
     */
    'reason': ApiV1AuthAuthenticatePost409ResponseAnyOfReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost409ResponseAnyOf
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost409ResponseAnyOf
     */
    'sessionExpiry': string;
    /**
     * 
     * @type {Array<ApiV1AuthAuthenticatePost409ResponseAnyOfSyncingDevicesInner>}
     * @memberof ApiV1AuthAuthenticatePost409ResponseAnyOf
     */
    'syncingDevices': Array<ApiV1AuthAuthenticatePost409ResponseAnyOfSyncingDevicesInner>;
}

export const ApiV1AuthAuthenticatePost409ResponseAnyOfReasonEnum = {
    AwaitingSyncing: 'awaiting_syncing'
} as const;

export type ApiV1AuthAuthenticatePost409ResponseAnyOfReasonEnum = typeof ApiV1AuthAuthenticatePost409ResponseAnyOfReasonEnum[keyof typeof ApiV1AuthAuthenticatePost409ResponseAnyOfReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthAuthenticatePost409ResponseAnyOf1
 */
export interface ApiV1AuthAuthenticatePost409ResponseAnyOf1 {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost409ResponseAnyOf1
     */
    'reason': ApiV1AuthAuthenticatePost409ResponseAnyOf1ReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost409ResponseAnyOf1
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost409ResponseAnyOf1
     */
    'sessionExpiry': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost409ResponseAnyOf1
     */
    'encryptedSymmKey': string;
    /**
     * 
     * @type {Array<ApiV1AuthAuthenticatePost409ResponseAnyOfSyncingDevicesInner>}
     * @memberof ApiV1AuthAuthenticatePost409ResponseAnyOf1
     */
    'syncingDevices': Array<ApiV1AuthAuthenticatePost409ResponseAnyOfSyncingDevicesInner>;
    /**
     * 
     * @type {{ [key: string]: ApiV1AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof ApiV1AuthAuthenticatePost409ResponseAnyOf1
     */
    'emailCredentialsPerEmail': { [key: string]: ApiV1AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType}
     * @memberof ApiV1AuthAuthenticatePost409ResponseAnyOf1
     */
    'secretCredentialsPerType': ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType;
}

export const ApiV1AuthAuthenticatePost409ResponseAnyOf1ReasonEnum = {
    AlreadyLoggedIn: 'already_logged_in'
} as const;

export type ApiV1AuthAuthenticatePost409ResponseAnyOf1ReasonEnum = typeof ApiV1AuthAuthenticatePost409ResponseAnyOf1ReasonEnum[keyof typeof ApiV1AuthAuthenticatePost409ResponseAnyOf1ReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue
 */
export interface ApiV1AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue
     */
    'active'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue
     */
    'revoked': Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType
 */
export interface ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType {
    /**
     * 
     * @type {ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnbound}
     * @memberof ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType
     */
    'unbound': ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnbound;
    /**
     * 
     * @type {ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnbound}
     * @memberof ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType
     */
    'timebound': ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnbound;
}
/**
 * 
 * @export
 * @interface ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnbound
 */
export interface ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnbound {
    /**
     * 
     * @type {ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnboundActive}
     * @memberof ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnbound
     */
    'active'?: ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnboundActive;
    /**
     * 
     * @type {Array<ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnboundActive>}
     * @memberof ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnbound
     */
    'revoked': Array<ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnboundActive>;
}
/**
 * 
 * @export
 * @interface ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnboundActive
 */
export interface ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnboundActive {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnboundActive
     */
    'blindedCredential': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnboundActive
     */
    'encryptedBlinding': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnboundActive
     */
    'encryptedBlindedSubject': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthAuthenticatePost409ResponseAnyOfSyncingDevicesInner
 */
export interface ApiV1AuthAuthenticatePost409ResponseAnyOfSyncingDevicesInner {
    /**
     * Decentralized Identifier with did:key method
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost409ResponseAnyOfSyncingDevicesInner
     */
    'didWrite': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost409ResponseAnyOfSyncingDevicesInner
     */
    'userAgent': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthAuthenticatePostRequest
 */
export interface ApiV1AuthAuthenticatePostRequest {
    /**
     * Email address
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePostRequest
     */
    'email': string;
    /**
     * Decentralized Identifier with did:key method
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePostRequest
     */
    'didExchange': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AuthAuthenticatePostRequest
     */
    'isRequestingNewCode': boolean;
}
/**
 * 
 * @export
 * @interface ApiV1AuthRecoverPost200Response
 */
export interface ApiV1AuthRecoverPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthRecoverPost200Response
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthRecoverPost200Response
     */
    'sessionExpiry': string;
    /**
     * 
     * @type {Array<ApiV1AuthAuthenticatePost409ResponseAnyOfSyncingDevicesInner>}
     * @memberof ApiV1AuthRecoverPost200Response
     */
    'syncingDevices': Array<ApiV1AuthAuthenticatePost409ResponseAnyOfSyncingDevicesInner>;
    /**
     * 
     * @type {{ [key: string]: ApiV1AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof ApiV1AuthRecoverPost200Response
     */
    'emailCredentialsPerEmail': { [key: string]: ApiV1AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType}
     * @memberof ApiV1AuthRecoverPost200Response
     */
    'secretCredentialsPerType': ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType;
}
/**
 * 
 * @export
 * @interface ApiV1AuthRecoverPostRequest
 */
export interface ApiV1AuthRecoverPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthRecoverPostRequest
     */
    'encryptedSymmKey': string;
    /**
     * 
     * @type {ApiV1AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest}
     * @memberof ApiV1AuthRecoverPostRequest
     */
    'timeboundSecretCredentialRequest': ApiV1AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest;
    /**
     * 
     * @type {ApiV1AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest}
     * @memberof ApiV1AuthRecoverPostRequest
     */
    'unboundSecretCredentialRequest': ApiV1AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest;
}
/**
 * 
 * @export
 * @interface ApiV1AuthSyncPost409Response
 */
export interface ApiV1AuthSyncPost409Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthSyncPost409Response
     */
    'reason': ApiV1AuthSyncPost409ResponseReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthSyncPost409Response
     */
    'userId': string;
}

export const ApiV1AuthSyncPost409ResponseReasonEnum = {
    AlreadySyncing: 'already_syncing'
} as const;

export type ApiV1AuthSyncPost409ResponseReasonEnum = typeof ApiV1AuthSyncPost409ResponseReasonEnum[keyof typeof ApiV1AuthSyncPost409ResponseReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthVerifyOtpPost200Response
 */
export interface ApiV1AuthVerifyOtpPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AuthVerifyOtpPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthVerifyOtpPost200Response
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthVerifyOtpPost200Response
     */
    'encryptedSymmKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthVerifyOtpPost200Response
     */
    'sessionExpiry': string;
    /**
     * 
     * @type {Array<ApiV1AuthAuthenticatePost409ResponseAnyOfSyncingDevicesInner>}
     * @memberof ApiV1AuthVerifyOtpPost200Response
     */
    'syncingDevices': Array<ApiV1AuthAuthenticatePost409ResponseAnyOfSyncingDevicesInner>;
    /**
     * 
     * @type {{ [key: string]: ApiV1AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof ApiV1AuthVerifyOtpPost200Response
     */
    'emailCredentialsPerEmail': { [key: string]: ApiV1AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType}
     * @memberof ApiV1AuthVerifyOtpPost200Response
     */
    'secretCredentialsPerType': ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthVerifyOtpPost200Response
     */
    'reason': ApiV1AuthVerifyOtpPost200ResponseReasonEnum;
}

export const ApiV1AuthVerifyOtpPost200ResponseReasonEnum = {
    ExpiredCode: 'expired_code',
    WrongGuess: 'wrong_guess',
    TooManyWrongGuess: 'too_many_wrong_guess',
    EncryptedSymmKeyRequired: 'encrypted_symm_key_required',
    UnboundSecretCredentialRequestRequired: 'unbound_secret_credential_request_required',
    TimeboundSecretCredentialRequestRequired: 'timebound_secret_credential_request_required',
    SecretCredentialRequestsRequired: 'secret_credential_requests_required'
} as const;

export type ApiV1AuthVerifyOtpPost200ResponseReasonEnum = typeof ApiV1AuthVerifyOtpPost200ResponseReasonEnum[keyof typeof ApiV1AuthVerifyOtpPost200ResponseReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthVerifyOtpPost200ResponseAnyOf
 */
export interface ApiV1AuthVerifyOtpPost200ResponseAnyOf {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AuthVerifyOtpPost200ResponseAnyOf
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthVerifyOtpPost200ResponseAnyOf
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthVerifyOtpPost200ResponseAnyOf
     */
    'encryptedSymmKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthVerifyOtpPost200ResponseAnyOf
     */
    'sessionExpiry': string;
    /**
     * 
     * @type {Array<ApiV1AuthAuthenticatePost409ResponseAnyOfSyncingDevicesInner>}
     * @memberof ApiV1AuthVerifyOtpPost200ResponseAnyOf
     */
    'syncingDevices': Array<ApiV1AuthAuthenticatePost409ResponseAnyOfSyncingDevicesInner>;
    /**
     * 
     * @type {{ [key: string]: ApiV1AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof ApiV1AuthVerifyOtpPost200ResponseAnyOf
     */
    'emailCredentialsPerEmail': { [key: string]: ApiV1AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType}
     * @memberof ApiV1AuthVerifyOtpPost200ResponseAnyOf
     */
    'secretCredentialsPerType': ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType;
}
/**
 * 
 * @export
 * @interface ApiV1AuthVerifyOtpPost200ResponseAnyOf1
 */
export interface ApiV1AuthVerifyOtpPost200ResponseAnyOf1 {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AuthVerifyOtpPost200ResponseAnyOf1
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthVerifyOtpPost200ResponseAnyOf1
     */
    'reason': ApiV1AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum;
}

export const ApiV1AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum = {
    ExpiredCode: 'expired_code',
    WrongGuess: 'wrong_guess',
    TooManyWrongGuess: 'too_many_wrong_guess',
    EncryptedSymmKeyRequired: 'encrypted_symm_key_required',
    UnboundSecretCredentialRequestRequired: 'unbound_secret_credential_request_required',
    TimeboundSecretCredentialRequestRequired: 'timebound_secret_credential_request_required',
    SecretCredentialRequestsRequired: 'secret_credential_requests_required'
} as const;

export type ApiV1AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum = typeof ApiV1AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum[keyof typeof ApiV1AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthVerifyOtpPostRequest
 */
export interface ApiV1AuthVerifyOtpPostRequest {
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthVerifyOtpPostRequest
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthVerifyOtpPostRequest
     */
    'encryptedSymmKey'?: string;
    /**
     * 
     * @type {ApiV1AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest}
     * @memberof ApiV1AuthVerifyOtpPostRequest
     */
    'timeboundSecretCredentialRequest'?: ApiV1AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest;
    /**
     * 
     * @type {ApiV1AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest}
     * @memberof ApiV1AuthVerifyOtpPostRequest
     */
    'unboundSecretCredentialRequest'?: ApiV1AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest;
}
/**
 * 
 * @export
 * @interface ApiV1AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest
 */
export interface ApiV1AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ApiV1AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest
     */
    'blindedRequest': { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest
     */
    'encryptedEncodedBlindedSubject': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest
     */
    'encryptedEncodedBlinding': string;
}
/**
 * 
 * @export
 * @interface ApiV1CommentCreatePostRequest
 */
export interface ApiV1CommentCreatePostRequest {
    /**
     * 
     * @type {any}
     * @memberof ApiV1CommentCreatePostRequest
     */
    'pres'?: any;
    /**
     * 
     * @type {ApiV1CommentCreatePostRequestPayload}
     * @memberof ApiV1CommentCreatePostRequest
     */
    'payload': ApiV1CommentCreatePostRequestPayload;
}
/**
 * 
 * @export
 * @interface ApiV1CommentCreatePostRequestPayload
 */
export interface ApiV1CommentCreatePostRequestPayload {
    /**
     * 
     * @type {string}
     * @memberof ApiV1CommentCreatePostRequestPayload
     */
    'postUid': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1CommentCreatePostRequestPayload
     */
    'content': string;
}
/**
 * 
 * @export
 * @interface ApiV1CommentFetchMorePost200Response
 */
export interface ApiV1CommentFetchMorePost200Response {
    /**
     * 
     * @type {Array<ApiV1PostFetchPost200ResponseCommentsInner>}
     * @memberof ApiV1CommentFetchMorePost200Response
     */
    'comments': Array<ApiV1PostFetchPost200ResponseCommentsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1CommentFetchMorePostRequest
 */
export interface ApiV1CommentFetchMorePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1CommentFetchMorePostRequest
     */
    'postSlugId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1CommentFetchMorePostRequest
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1CredentialEmailRenewPost200Response
 */
export interface ApiV1CredentialEmailRenewPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1CredentialEmailRenewPost200Response
     */
    'emailCredential': string;
}
/**
 * 
 * @export
 * @interface ApiV1CredentialEmailRenewPostRequest
 */
export interface ApiV1CredentialEmailRenewPostRequest {
    /**
     * Email address
     * @type {string}
     * @memberof ApiV1CredentialEmailRenewPostRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface ApiV1CredentialGetPost200Response
 */
export interface ApiV1CredentialGetPost200Response {
    /**
     * 
     * @type {{ [key: string]: ApiV1AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof ApiV1CredentialGetPost200Response
     */
    'emailCredentialsPerEmail': { [key: string]: ApiV1AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType}
     * @memberof ApiV1CredentialGetPost200Response
     */
    'secretCredentialsPerType': ApiV1AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType;
}
/**
 * 
 * @export
 * @interface ApiV1CredentialSecretRenewPost200Response
 */
export interface ApiV1CredentialSecretRenewPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1CredentialSecretRenewPost200Response
     */
    'signedBlindedCredential': string;
}
/**
 * 
 * @export
 * @interface ApiV1CredentialSecretRenewPostRequest
 */
export interface ApiV1CredentialSecretRenewPostRequest {
    /**
     * 
     * @type {ApiV1AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest}
     * @memberof ApiV1CredentialSecretRenewPostRequest
     */
    'secretCredentialRequest': ApiV1AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest;
    /**
     * 
     * @type {string}
     * @memberof ApiV1CredentialSecretRenewPostRequest
     */
    'type': ApiV1CredentialSecretRenewPostRequestTypeEnum;
}

export const ApiV1CredentialSecretRenewPostRequestTypeEnum = {
    Unbound: 'unbound',
    Timebound: 'timebound'
} as const;

export type ApiV1CredentialSecretRenewPostRequestTypeEnum = typeof ApiV1CredentialSecretRenewPostRequestTypeEnum[keyof typeof ApiV1CredentialSecretRenewPostRequestTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1FeedFetchMorePostRequest
 */
export interface ApiV1FeedFetchMorePostRequest {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1FeedFetchMorePostRequest
     */
    'showHidden': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1FeedFetchMorePostRequest
     */
    'lastReactedAt'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1ModerationHideCommentPostRequest
 */
export interface ApiV1ModerationHideCommentPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationHideCommentPostRequest
     */
    'commentSlugId': string;
}
/**
 * 
 * @export
 * @interface ApiV1ModerationHidePostPostRequest
 */
export interface ApiV1ModerationHidePostPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationHidePostPostRequest
     */
    'pollUid': string;
}
/**
 * 
 * @export
 * @interface ApiV1PollRespondPost200Response
 */
export interface ApiV1PollRespondPost200Response {
    /**
     * 
     * @type {ApiV1PollRespondPost200ResponseMetadata}
     * @memberof ApiV1PollRespondPost200Response
     */
    'metadata': ApiV1PollRespondPost200ResponseMetadata;
    /**
     * 
     * @type {ApiV1PollRespondPost200ResponsePayload}
     * @memberof ApiV1PollRespondPost200Response
     */
    'payload': ApiV1PollRespondPost200ResponsePayload;
    /**
     * 
     * @type {ApiV1PollRespondPost200ResponseAuthor}
     * @memberof ApiV1PollRespondPost200Response
     */
    'author': ApiV1PollRespondPost200ResponseAuthor;
}
/**
 * 
 * @export
 * @interface ApiV1PollRespondPost200ResponseAuthor
 */
export interface ApiV1PollRespondPost200ResponseAuthor {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PollRespondPost200ResponseAuthor
     */
    'pseudonym': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PollRespondPost200ResponseAuthor
     */
    'domain': string;
}
/**
 * 
 * @export
 * @interface ApiV1PollRespondPost200ResponseMetadata
 */
export interface ApiV1PollRespondPost200ResponseMetadata {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PollRespondPost200ResponseMetadata
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PollRespondPost200ResponseMetadata
     */
    'slugId': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1PollRespondPost200ResponseMetadata
     */
    'isHidden'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PollRespondPost200ResponseMetadata
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PollRespondPost200ResponseMetadata
     */
    'lastReactedAt': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1PollRespondPost200ResponseMetadata
     */
    'commentCount': number;
}
/**
 * 
 * @export
 * @interface ApiV1PollRespondPost200ResponsePayload
 */
export interface ApiV1PollRespondPost200ResponsePayload {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PollRespondPost200ResponsePayload
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PollRespondPost200ResponsePayload
     */
    'body'?: string;
    /**
     * 
     * @type {ApiV1PollRespondPost200ResponsePayloadPoll}
     * @memberof ApiV1PollRespondPost200ResponsePayload
     */
    'poll'?: ApiV1PollRespondPost200ResponsePayloadPoll;
}
/**
 * 
 * @export
 * @interface ApiV1PollRespondPost200ResponsePayloadPoll
 */
export interface ApiV1PollRespondPost200ResponsePayloadPoll {
    /**
     * 
     * @type {ApiV1PostCreatePostRequestPostDataPoll}
     * @memberof ApiV1PollRespondPost200ResponsePayloadPoll
     */
    'options': ApiV1PostCreatePostRequestPostDataPoll;
    /**
     * 
     * @type {ApiV1PollRespondPost200ResponsePayloadPollResult}
     * @memberof ApiV1PollRespondPost200ResponsePayloadPoll
     */
    'result': ApiV1PollRespondPost200ResponsePayloadPollResult;
}
/**
 * 
 * @export
 * @interface ApiV1PollRespondPost200ResponsePayloadPollResult
 */
export interface ApiV1PollRespondPost200ResponsePayloadPollResult {
    /**
     * 
     * @type {number}
     * @memberof ApiV1PollRespondPost200ResponsePayloadPollResult
     */
    'option1Response': number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1PollRespondPost200ResponsePayloadPollResult
     */
    'option2Response': number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1PollRespondPost200ResponsePayloadPollResult
     */
    'option3Response'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1PollRespondPost200ResponsePayloadPollResult
     */
    'option4Response'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1PollRespondPost200ResponsePayloadPollResult
     */
    'option5Response'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1PollRespondPost200ResponsePayloadPollResult
     */
    'option6Response'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1PollRespondPostRequest
 */
export interface ApiV1PollRespondPostRequest {
    /**
     * 
     * @type {ApiV1PollRespondPostRequestResponseToPoll}
     * @memberof ApiV1PollRespondPostRequest
     */
    'responseToPoll': ApiV1PollRespondPostRequestResponseToPoll;
    /**
     * 
     * @type {any}
     * @memberof ApiV1PollRespondPostRequest
     */
    'pres'?: any;
}
/**
 * 
 * @export
 * @interface ApiV1PollRespondPostRequestResponseToPoll
 */
export interface ApiV1PollRespondPostRequestResponseToPoll {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PollRespondPostRequestResponseToPoll
     */
    'postUid': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1PollRespondPostRequestResponseToPoll
     */
    'optionChosen': number;
}
/**
 * 
 * @export
 * @interface ApiV1PostCreatePostRequest
 */
export interface ApiV1PostCreatePostRequest {
    /**
     * 
     * @type {ApiV1PostCreatePostRequestPost}
     * @memberof ApiV1PostCreatePostRequest
     */
    'post': ApiV1PostCreatePostRequestPost;
    /**
     * 
     * @type {any}
     * @memberof ApiV1PostCreatePostRequest
     */
    'pres'?: any;
}
/**
 * 
 * @export
 * @interface ApiV1PostCreatePostRequestPost
 */
export interface ApiV1PostCreatePostRequestPost {
    /**
     * 
     * @type {ApiV1PostCreatePostRequestPostData}
     * @memberof ApiV1PostCreatePostRequestPost
     */
    'data': ApiV1PostCreatePostRequestPostData;
}
/**
 * 
 * @export
 * @interface ApiV1PostCreatePostRequestPostData
 */
export interface ApiV1PostCreatePostRequestPostData {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PostCreatePostRequestPostData
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PostCreatePostRequestPostData
     */
    'body'?: string;
    /**
     * 
     * @type {ApiV1PostCreatePostRequestPostDataPoll}
     * @memberof ApiV1PostCreatePostRequestPostData
     */
    'poll'?: ApiV1PostCreatePostRequestPostDataPoll;
}
/**
 * 
 * @export
 * @interface ApiV1PostCreatePostRequestPostDataPoll
 */
export interface ApiV1PostCreatePostRequestPostDataPoll {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PostCreatePostRequestPostDataPoll
     */
    'option1': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PostCreatePostRequestPostDataPoll
     */
    'option2': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PostCreatePostRequestPostDataPoll
     */
    'option3'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PostCreatePostRequestPostDataPoll
     */
    'option4'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PostCreatePostRequestPostDataPoll
     */
    'option5'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PostCreatePostRequestPostDataPoll
     */
    'option6'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PostFetchPost200Response
 */
export interface ApiV1PostFetchPost200Response {
    /**
     * 
     * @type {ApiV1PollRespondPost200Response}
     * @memberof ApiV1PostFetchPost200Response
     */
    'post': ApiV1PollRespondPost200Response;
    /**
     * 
     * @type {Array<ApiV1PostFetchPost200ResponseCommentsInner>}
     * @memberof ApiV1PostFetchPost200Response
     */
    'comments': Array<ApiV1PostFetchPost200ResponseCommentsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1PostFetchPost200ResponseCommentsInner
 */
export interface ApiV1PostFetchPost200ResponseCommentsInner {
    /**
     * 
     * @type {ApiV1PostFetchPost200ResponseCommentsInnerMetadata}
     * @memberof ApiV1PostFetchPost200ResponseCommentsInner
     */
    'metadata': ApiV1PostFetchPost200ResponseCommentsInnerMetadata;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PostFetchPost200ResponseCommentsInner
     */
    'content': string;
    /**
     * 
     * @type {ApiV1PollRespondPost200ResponseAuthor}
     * @memberof ApiV1PostFetchPost200ResponseCommentsInner
     */
    'author': ApiV1PollRespondPost200ResponseAuthor;
}
/**
 * 
 * @export
 * @interface ApiV1PostFetchPost200ResponseCommentsInnerMetadata
 */
export interface ApiV1PostFetchPost200ResponseCommentsInnerMetadata {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PostFetchPost200ResponseCommentsInnerMetadata
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PostFetchPost200ResponseCommentsInnerMetadata
     */
    'slugId': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1PostFetchPost200ResponseCommentsInnerMetadata
     */
    'isHidden'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PostFetchPost200ResponseCommentsInnerMetadata
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV1PostFetchPostRequest
 */
export interface ApiV1PostFetchPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PostFetchPostRequest
     */
    'postSlugId': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ApiV1AuthAuthenticatePostRequest} apiV1AuthAuthenticatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAuthenticatePost: async (apiV1AuthAuthenticatePostRequest: ApiV1AuthAuthenticatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AuthAuthenticatePostRequest' is not null or undefined
            assertParamExists('apiV1AuthAuthenticatePost', 'apiV1AuthAuthenticatePostRequest', apiV1AuthAuthenticatePostRequest)
            const localVarPath = `/api/v1/auth/authenticate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthAuthenticatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLogoutPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1AuthRecoverPostRequest} apiV1AuthRecoverPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthRecoverPost: async (apiV1AuthRecoverPostRequest: ApiV1AuthRecoverPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AuthRecoverPostRequest' is not null or undefined
            assertParamExists('apiV1AuthRecoverPost', 'apiV1AuthRecoverPostRequest', apiV1AuthRecoverPostRequest)
            const localVarPath = `/api/v1/auth/recover`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthRecoverPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthSyncPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1AuthVerifyOtpPostRequest} apiV1AuthVerifyOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthVerifyOtpPost: async (apiV1AuthVerifyOtpPostRequest: ApiV1AuthVerifyOtpPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AuthVerifyOtpPostRequest' is not null or undefined
            assertParamExists('apiV1AuthVerifyOtpPost', 'apiV1AuthVerifyOtpPostRequest', apiV1AuthVerifyOtpPostRequest)
            const localVarPath = `/api/v1/auth/verifyOtp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthVerifyOtpPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1CommentCreatePostRequest} apiV1CommentCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CommentCreatePost: async (apiV1CommentCreatePostRequest: ApiV1CommentCreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1CommentCreatePostRequest' is not null or undefined
            assertParamExists('apiV1CommentCreatePost', 'apiV1CommentCreatePostRequest', apiV1CommentCreatePostRequest)
            const localVarPath = `/api/v1/comment/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CommentCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1CommentFetchMorePostRequest} apiV1CommentFetchMorePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CommentFetchMorePost: async (apiV1CommentFetchMorePostRequest: ApiV1CommentFetchMorePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1CommentFetchMorePostRequest' is not null or undefined
            assertParamExists('apiV1CommentFetchMorePost', 'apiV1CommentFetchMorePostRequest', apiV1CommentFetchMorePostRequest)
            const localVarPath = `/api/v1/comment/fetchMore`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CommentFetchMorePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1CommentFetchMorePostRequest} apiV1CommentFetchMorePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CommentFetchRecentPost: async (apiV1CommentFetchMorePostRequest: ApiV1CommentFetchMorePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1CommentFetchMorePostRequest' is not null or undefined
            assertParamExists('apiV1CommentFetchRecentPost', 'apiV1CommentFetchMorePostRequest', apiV1CommentFetchMorePostRequest)
            const localVarPath = `/api/v1/comment/fetchRecent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CommentFetchMorePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Renew an active email credential - fails if already exists. Used when rotating issuer public key or modifying schema.
         * @param {ApiV1CredentialEmailRenewPostRequest} apiV1CredentialEmailRenewPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CredentialEmailRenewPost: async (apiV1CredentialEmailRenewPostRequest: ApiV1CredentialEmailRenewPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1CredentialEmailRenewPostRequest' is not null or undefined
            assertParamExists('apiV1CredentialEmailRenewPost', 'apiV1CredentialEmailRenewPostRequest', apiV1CredentialEmailRenewPostRequest)
            const localVarPath = `/api/v1/credential/email/renew`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CredentialEmailRenewPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CredentialGetPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/credential/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Renew an active secret credential - fails if already exists. Used when rotating issuer public key.
         * @param {ApiV1CredentialSecretRenewPostRequest} apiV1CredentialSecretRenewPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CredentialSecretRenewPost: async (apiV1CredentialSecretRenewPostRequest: ApiV1CredentialSecretRenewPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1CredentialSecretRenewPostRequest' is not null or undefined
            assertParamExists('apiV1CredentialSecretRenewPost', 'apiV1CredentialSecretRenewPostRequest', apiV1CredentialSecretRenewPostRequest)
            const localVarPath = `/api/v1/credential/secret/renew`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CredentialSecretRenewPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1FeedFetchMorePostRequest} apiV1FeedFetchMorePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FeedFetchMorePost: async (apiV1FeedFetchMorePostRequest: ApiV1FeedFetchMorePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1FeedFetchMorePostRequest' is not null or undefined
            assertParamExists('apiV1FeedFetchMorePost', 'apiV1FeedFetchMorePostRequest', apiV1FeedFetchMorePostRequest)
            const localVarPath = `/api/v1/feed/fetchMore`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1FeedFetchMorePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1FeedFetchMorePostRequest} apiV1FeedFetchMorePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FeedFetchRecentPost: async (apiV1FeedFetchMorePostRequest: ApiV1FeedFetchMorePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1FeedFetchMorePostRequest' is not null or undefined
            assertParamExists('apiV1FeedFetchRecentPost', 'apiV1FeedFetchMorePostRequest', apiV1FeedFetchMorePostRequest)
            const localVarPath = `/api/v1/feed/fetchRecent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1FeedFetchMorePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ModerationHideCommentPostRequest} apiV1ModerationHideCommentPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ModerationHideCommentPost: async (apiV1ModerationHideCommentPostRequest: ApiV1ModerationHideCommentPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ModerationHideCommentPostRequest' is not null or undefined
            assertParamExists('apiV1ModerationHideCommentPost', 'apiV1ModerationHideCommentPostRequest', apiV1ModerationHideCommentPostRequest)
            const localVarPath = `/api/v1/moderation/hideComment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ModerationHideCommentPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ModerationHidePostPostRequest} apiV1ModerationHidePostPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ModerationHidePostPost: async (apiV1ModerationHidePostPostRequest: ApiV1ModerationHidePostPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ModerationHidePostPostRequest' is not null or undefined
            assertParamExists('apiV1ModerationHidePostPost', 'apiV1ModerationHidePostPostRequest', apiV1ModerationHidePostPostRequest)
            const localVarPath = `/api/v1/moderation/hidePost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ModerationHidePostPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ModerationHideCommentPostRequest} apiV1ModerationHideCommentPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ModerationUnhideCommentPost: async (apiV1ModerationHideCommentPostRequest: ApiV1ModerationHideCommentPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ModerationHideCommentPostRequest' is not null or undefined
            assertParamExists('apiV1ModerationUnhideCommentPost', 'apiV1ModerationHideCommentPostRequest', apiV1ModerationHideCommentPostRequest)
            const localVarPath = `/api/v1/moderation/unhideComment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ModerationHideCommentPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ModerationHidePostPostRequest} apiV1ModerationHidePostPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ModerationUnhidePostPost: async (apiV1ModerationHidePostPostRequest: ApiV1ModerationHidePostPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ModerationHidePostPostRequest' is not null or undefined
            assertParamExists('apiV1ModerationUnhidePostPost', 'apiV1ModerationHidePostPostRequest', apiV1ModerationHidePostPostRequest)
            const localVarPath = `/api/v1/moderation/unhidePost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ModerationHidePostPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1PollRespondPostRequest} apiV1PollRespondPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PollRespondPost: async (apiV1PollRespondPostRequest: ApiV1PollRespondPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PollRespondPostRequest' is not null or undefined
            assertParamExists('apiV1PollRespondPost', 'apiV1PollRespondPostRequest', apiV1PollRespondPostRequest)
            const localVarPath = `/api/v1/poll/respond`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PollRespondPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1PostCreatePostRequest} apiV1PostCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PostCreatePost: async (apiV1PostCreatePostRequest: ApiV1PostCreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PostCreatePostRequest' is not null or undefined
            assertParamExists('apiV1PostCreatePost', 'apiV1PostCreatePostRequest', apiV1PostCreatePostRequest)
            const localVarPath = `/api/v1/post/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PostCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1PostFetchPostRequest} apiV1PostFetchPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PostFetchPost: async (apiV1PostFetchPostRequest: ApiV1PostFetchPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PostFetchPostRequest' is not null or undefined
            assertParamExists('apiV1PostFetchPost', 'apiV1PostFetchPostRequest', apiV1PostFetchPostRequest)
            const localVarPath = `/api/v1/post/fetch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PostFetchPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ApiV1AuthAuthenticatePostRequest} apiV1AuthAuthenticatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthAuthenticatePost(apiV1AuthAuthenticatePostRequest: ApiV1AuthAuthenticatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthAuthenticatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthAuthenticatePost(apiV1AuthAuthenticatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthLogoutPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthLogoutPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ApiV1AuthRecoverPostRequest} apiV1AuthRecoverPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthRecoverPost(apiV1AuthRecoverPostRequest: ApiV1AuthRecoverPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthRecoverPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthRecoverPost(apiV1AuthRecoverPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthSyncPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthSyncPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ApiV1AuthVerifyOtpPostRequest} apiV1AuthVerifyOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthVerifyOtpPost(apiV1AuthVerifyOtpPostRequest: ApiV1AuthVerifyOtpPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthVerifyOtpPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthVerifyOtpPost(apiV1AuthVerifyOtpPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ApiV1CommentCreatePostRequest} apiV1CommentCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CommentCreatePost(apiV1CommentCreatePostRequest: ApiV1CommentCreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CommentCreatePost(apiV1CommentCreatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ApiV1CommentFetchMorePostRequest} apiV1CommentFetchMorePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CommentFetchMorePost(apiV1CommentFetchMorePostRequest: ApiV1CommentFetchMorePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1CommentFetchMorePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CommentFetchMorePost(apiV1CommentFetchMorePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ApiV1CommentFetchMorePostRequest} apiV1CommentFetchMorePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CommentFetchRecentPost(apiV1CommentFetchMorePostRequest: ApiV1CommentFetchMorePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1CommentFetchMorePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CommentFetchRecentPost(apiV1CommentFetchMorePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Renew an active email credential - fails if already exists. Used when rotating issuer public key or modifying schema.
         * @param {ApiV1CredentialEmailRenewPostRequest} apiV1CredentialEmailRenewPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CredentialEmailRenewPost(apiV1CredentialEmailRenewPostRequest: ApiV1CredentialEmailRenewPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1CredentialEmailRenewPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CredentialEmailRenewPost(apiV1CredentialEmailRenewPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CredentialGetPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1CredentialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CredentialGetPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Renew an active secret credential - fails if already exists. Used when rotating issuer public key.
         * @param {ApiV1CredentialSecretRenewPostRequest} apiV1CredentialSecretRenewPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CredentialSecretRenewPost(apiV1CredentialSecretRenewPostRequest: ApiV1CredentialSecretRenewPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1CredentialSecretRenewPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CredentialSecretRenewPost(apiV1CredentialSecretRenewPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ApiV1FeedFetchMorePostRequest} apiV1FeedFetchMorePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FeedFetchMorePost(apiV1FeedFetchMorePostRequest: ApiV1FeedFetchMorePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1PollRespondPost200Response>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FeedFetchMorePost(apiV1FeedFetchMorePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ApiV1FeedFetchMorePostRequest} apiV1FeedFetchMorePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FeedFetchRecentPost(apiV1FeedFetchMorePostRequest: ApiV1FeedFetchMorePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1PollRespondPost200Response>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FeedFetchRecentPost(apiV1FeedFetchMorePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ApiV1ModerationHideCommentPostRequest} apiV1ModerationHideCommentPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ModerationHideCommentPost(apiV1ModerationHideCommentPostRequest: ApiV1ModerationHideCommentPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ModerationHideCommentPost(apiV1ModerationHideCommentPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ApiV1ModerationHidePostPostRequest} apiV1ModerationHidePostPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ModerationHidePostPost(apiV1ModerationHidePostPostRequest: ApiV1ModerationHidePostPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ModerationHidePostPost(apiV1ModerationHidePostPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ApiV1ModerationHideCommentPostRequest} apiV1ModerationHideCommentPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ModerationUnhideCommentPost(apiV1ModerationHideCommentPostRequest: ApiV1ModerationHideCommentPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ModerationUnhideCommentPost(apiV1ModerationHideCommentPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ApiV1ModerationHidePostPostRequest} apiV1ModerationHidePostPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ModerationUnhidePostPost(apiV1ModerationHidePostPostRequest: ApiV1ModerationHidePostPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ModerationUnhidePostPost(apiV1ModerationHidePostPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ApiV1PollRespondPostRequest} apiV1PollRespondPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PollRespondPost(apiV1PollRespondPostRequest: ApiV1PollRespondPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PollRespondPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PollRespondPost(apiV1PollRespondPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ApiV1PostCreatePostRequest} apiV1PostCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PostCreatePost(apiV1PostCreatePostRequest: ApiV1PostCreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PostCreatePost(apiV1PostCreatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ApiV1PostFetchPostRequest} apiV1PostFetchPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PostFetchPost(apiV1PostFetchPostRequest: ApiV1PostFetchPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PostFetchPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PostFetchPost(apiV1PostFetchPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {ApiV1AuthAuthenticatePostRequest} apiV1AuthAuthenticatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAuthenticatePost(apiV1AuthAuthenticatePostRequest: ApiV1AuthAuthenticatePostRequest, options?: any): AxiosPromise<ApiV1AuthAuthenticatePost200Response> {
            return localVarFp.apiV1AuthAuthenticatePost(apiV1AuthAuthenticatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLogoutPost(options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AuthLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1AuthRecoverPostRequest} apiV1AuthRecoverPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthRecoverPost(apiV1AuthRecoverPostRequest: ApiV1AuthRecoverPostRequest, options?: any): AxiosPromise<ApiV1AuthRecoverPost200Response> {
            return localVarFp.apiV1AuthRecoverPost(apiV1AuthRecoverPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthSyncPost(options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AuthSyncPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1AuthVerifyOtpPostRequest} apiV1AuthVerifyOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthVerifyOtpPost(apiV1AuthVerifyOtpPostRequest: ApiV1AuthVerifyOtpPostRequest, options?: any): AxiosPromise<ApiV1AuthVerifyOtpPost200Response> {
            return localVarFp.apiV1AuthVerifyOtpPost(apiV1AuthVerifyOtpPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1CommentCreatePostRequest} apiV1CommentCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CommentCreatePost(apiV1CommentCreatePostRequest: ApiV1CommentCreatePostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1CommentCreatePost(apiV1CommentCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1CommentFetchMorePostRequest} apiV1CommentFetchMorePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CommentFetchMorePost(apiV1CommentFetchMorePostRequest: ApiV1CommentFetchMorePostRequest, options?: any): AxiosPromise<ApiV1CommentFetchMorePost200Response> {
            return localVarFp.apiV1CommentFetchMorePost(apiV1CommentFetchMorePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1CommentFetchMorePostRequest} apiV1CommentFetchMorePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CommentFetchRecentPost(apiV1CommentFetchMorePostRequest: ApiV1CommentFetchMorePostRequest, options?: any): AxiosPromise<ApiV1CommentFetchMorePost200Response> {
            return localVarFp.apiV1CommentFetchRecentPost(apiV1CommentFetchMorePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Renew an active email credential - fails if already exists. Used when rotating issuer public key or modifying schema.
         * @param {ApiV1CredentialEmailRenewPostRequest} apiV1CredentialEmailRenewPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CredentialEmailRenewPost(apiV1CredentialEmailRenewPostRequest: ApiV1CredentialEmailRenewPostRequest, options?: any): AxiosPromise<ApiV1CredentialEmailRenewPost200Response> {
            return localVarFp.apiV1CredentialEmailRenewPost(apiV1CredentialEmailRenewPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CredentialGetPost(options?: any): AxiosPromise<ApiV1CredentialGetPost200Response> {
            return localVarFp.apiV1CredentialGetPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Renew an active secret credential - fails if already exists. Used when rotating issuer public key.
         * @param {ApiV1CredentialSecretRenewPostRequest} apiV1CredentialSecretRenewPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CredentialSecretRenewPost(apiV1CredentialSecretRenewPostRequest: ApiV1CredentialSecretRenewPostRequest, options?: any): AxiosPromise<ApiV1CredentialSecretRenewPost200Response> {
            return localVarFp.apiV1CredentialSecretRenewPost(apiV1CredentialSecretRenewPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1FeedFetchMorePostRequest} apiV1FeedFetchMorePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FeedFetchMorePost(apiV1FeedFetchMorePostRequest: ApiV1FeedFetchMorePostRequest, options?: any): AxiosPromise<Array<ApiV1PollRespondPost200Response>> {
            return localVarFp.apiV1FeedFetchMorePost(apiV1FeedFetchMorePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1FeedFetchMorePostRequest} apiV1FeedFetchMorePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FeedFetchRecentPost(apiV1FeedFetchMorePostRequest: ApiV1FeedFetchMorePostRequest, options?: any): AxiosPromise<Array<ApiV1PollRespondPost200Response>> {
            return localVarFp.apiV1FeedFetchRecentPost(apiV1FeedFetchMorePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1ModerationHideCommentPostRequest} apiV1ModerationHideCommentPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ModerationHideCommentPost(apiV1ModerationHideCommentPostRequest: ApiV1ModerationHideCommentPostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ModerationHideCommentPost(apiV1ModerationHideCommentPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1ModerationHidePostPostRequest} apiV1ModerationHidePostPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ModerationHidePostPost(apiV1ModerationHidePostPostRequest: ApiV1ModerationHidePostPostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ModerationHidePostPost(apiV1ModerationHidePostPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1ModerationHideCommentPostRequest} apiV1ModerationHideCommentPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ModerationUnhideCommentPost(apiV1ModerationHideCommentPostRequest: ApiV1ModerationHideCommentPostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ModerationUnhideCommentPost(apiV1ModerationHideCommentPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1ModerationHidePostPostRequest} apiV1ModerationHidePostPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ModerationUnhidePostPost(apiV1ModerationHidePostPostRequest: ApiV1ModerationHidePostPostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ModerationUnhidePostPost(apiV1ModerationHidePostPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1PollRespondPostRequest} apiV1PollRespondPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PollRespondPost(apiV1PollRespondPostRequest: ApiV1PollRespondPostRequest, options?: any): AxiosPromise<ApiV1PollRespondPost200Response> {
            return localVarFp.apiV1PollRespondPost(apiV1PollRespondPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1PostCreatePostRequest} apiV1PostCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PostCreatePost(apiV1PostCreatePostRequest: ApiV1PostCreatePostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1PostCreatePost(apiV1PostCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1PostFetchPostRequest} apiV1PostFetchPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PostFetchPost(apiV1PostFetchPostRequest: ApiV1PostFetchPostRequest, options?: any): AxiosPromise<ApiV1PostFetchPost200Response> {
            return localVarFp.apiV1PostFetchPost(apiV1PostFetchPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {ApiV1AuthAuthenticatePostRequest} apiV1AuthAuthenticatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthAuthenticatePost(apiV1AuthAuthenticatePostRequest: ApiV1AuthAuthenticatePostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthAuthenticatePost(apiV1AuthAuthenticatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthLogoutPost(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1AuthRecoverPostRequest} apiV1AuthRecoverPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthRecoverPost(apiV1AuthRecoverPostRequest: ApiV1AuthRecoverPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthRecoverPost(apiV1AuthRecoverPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthSyncPost(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthSyncPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1AuthVerifyOtpPostRequest} apiV1AuthVerifyOtpPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthVerifyOtpPost(apiV1AuthVerifyOtpPostRequest: ApiV1AuthVerifyOtpPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthVerifyOtpPost(apiV1AuthVerifyOtpPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1CommentCreatePostRequest} apiV1CommentCreatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CommentCreatePost(apiV1CommentCreatePostRequest: ApiV1CommentCreatePostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CommentCreatePost(apiV1CommentCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1CommentFetchMorePostRequest} apiV1CommentFetchMorePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CommentFetchMorePost(apiV1CommentFetchMorePostRequest: ApiV1CommentFetchMorePostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CommentFetchMorePost(apiV1CommentFetchMorePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1CommentFetchMorePostRequest} apiV1CommentFetchMorePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CommentFetchRecentPost(apiV1CommentFetchMorePostRequest: ApiV1CommentFetchMorePostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CommentFetchRecentPost(apiV1CommentFetchMorePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Renew an active email credential - fails if already exists. Used when rotating issuer public key or modifying schema.
     * @param {ApiV1CredentialEmailRenewPostRequest} apiV1CredentialEmailRenewPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CredentialEmailRenewPost(apiV1CredentialEmailRenewPostRequest: ApiV1CredentialEmailRenewPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CredentialEmailRenewPost(apiV1CredentialEmailRenewPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CredentialGetPost(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CredentialGetPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Renew an active secret credential - fails if already exists. Used when rotating issuer public key.
     * @param {ApiV1CredentialSecretRenewPostRequest} apiV1CredentialSecretRenewPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CredentialSecretRenewPost(apiV1CredentialSecretRenewPostRequest: ApiV1CredentialSecretRenewPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CredentialSecretRenewPost(apiV1CredentialSecretRenewPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1FeedFetchMorePostRequest} apiV1FeedFetchMorePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1FeedFetchMorePost(apiV1FeedFetchMorePostRequest: ApiV1FeedFetchMorePostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1FeedFetchMorePost(apiV1FeedFetchMorePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1FeedFetchMorePostRequest} apiV1FeedFetchMorePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1FeedFetchRecentPost(apiV1FeedFetchMorePostRequest: ApiV1FeedFetchMorePostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1FeedFetchRecentPost(apiV1FeedFetchMorePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1ModerationHideCommentPostRequest} apiV1ModerationHideCommentPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ModerationHideCommentPost(apiV1ModerationHideCommentPostRequest: ApiV1ModerationHideCommentPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ModerationHideCommentPost(apiV1ModerationHideCommentPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1ModerationHidePostPostRequest} apiV1ModerationHidePostPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ModerationHidePostPost(apiV1ModerationHidePostPostRequest: ApiV1ModerationHidePostPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ModerationHidePostPost(apiV1ModerationHidePostPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1ModerationHideCommentPostRequest} apiV1ModerationHideCommentPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ModerationUnhideCommentPost(apiV1ModerationHideCommentPostRequest: ApiV1ModerationHideCommentPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ModerationUnhideCommentPost(apiV1ModerationHideCommentPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1ModerationHidePostPostRequest} apiV1ModerationHidePostPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ModerationUnhidePostPost(apiV1ModerationHidePostPostRequest: ApiV1ModerationHidePostPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ModerationUnhidePostPost(apiV1ModerationHidePostPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1PollRespondPostRequest} apiV1PollRespondPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PollRespondPost(apiV1PollRespondPostRequest: ApiV1PollRespondPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PollRespondPost(apiV1PollRespondPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1PostCreatePostRequest} apiV1PostCreatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PostCreatePost(apiV1PostCreatePostRequest: ApiV1PostCreatePostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PostCreatePost(apiV1PostCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1PostFetchPostRequest} apiV1PostFetchPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PostFetchPost(apiV1PostFetchPostRequest: ApiV1PostFetchPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PostFetchPost(apiV1PostFetchPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



